package com.zhijin.drawerapp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.zhijin.drawerapp.bean.Article;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "ARTICLE".
 */
public class DataBeanDao extends AbstractDao<Article, String> {

    public static final String TABLENAME = "ARTICLE";

    /**
     * Properties of entity DataBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", false, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Source = new Property(2, String.class, "source", false, "SOURCE");
        public final static Property FirstImg = new Property(3, String.class, "firstImg", false, "FIRSTIMG");
        public final static Property Mark = new Property(4, String.class, "mark", false, "MARK");
        public final static Property Url = new Property(5, String.class, "url", false, "URL");
    }


    public DataBeanDao(DaoConfig config) {
        super(config);
    }

    @Override
    protected Article readEntity(Cursor cursor, int offset) {
        Article entity = new Article(
                cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 0),
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 1),
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 2),
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 3),
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 4),
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5)

        );
        return entity;
    }

    public DataBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"ARTICLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"SOURCE\" TEXT," + // 2: source
                "\"FIRSTIMG\" TEXT," + // 3: girstImg
                "\"MARK\" TEXT," + // 4: mark
                "\"URL\" TEXT);");//5.url
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ARTICLE\"";
        db.execSQL(sql);
    }


    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }

    @Override
    protected void readEntity(Cursor cursor, Article entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSource(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFirstImg(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMark(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
    }

    @Override
    protected void bindValues(DatabaseStatement stmt, Article entity) {
        stmt.clearBindings();
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(3, source);
        }
        String firstImg = entity.getFirstImg();
        if (firstImg != null) {
            stmt.bindString(4, firstImg);
        }
        String mark = entity.getMark();
        if (mark != null) {
            stmt.bindString(5, mark);
        }
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }
    }

    @Override
    protected void bindValues(SQLiteStatement stmt, Article entity) {
        stmt.clearBindings();
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(3, source);
        }
        String firstImg = entity.getFirstImg();
        if (firstImg != null) {
            stmt.bindString(4, firstImg);
        }
        String mark = entity.getMark();
        if (mark != null) {
            stmt.bindString(6, mark);
        }
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }
    }


    @Override
    protected String updateKeyAfterInsert(Article entity, long rowId) {
        entity.setId(rowId);
        return null;
    }

    @Override
    protected String getKey(Article entity) {
        return null;
    }


    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
